import numpy as np 
import pandas as pd 
import os
import torch
import torchvision
from tensorflow import keras
import tensorflow as tf
from keras.layers import Dense,Dropout,Activation,Add,MaxPooling2D,Conv2D,Flatten,BatchNormalization
from keras.models import Sequential
from keras import layers
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing import image
import numpy as np
import sklearn
from sklearn.metrics import roc_curve,auc



tf.test.gpu_device_name()


# train_datagen = ImageDataGenerator(rescale=1/255,
#                                    shear_range = 0.2,
#                                    zoom_range = 0.2,
#                                    vertical_flip =  True , 
#                                    rotation_range=40,
#                                    brightness_range = (0.5, 1.5),
#                                    horizontal_flip = True)
# train_data = train_datagen.flow_from_directory('C:/Project/data2/train',
#                                                  target_size = (244, 244),
#                                                  class_mode='sparse',
#                                                  shuffle=True,seed=1,
#                                                  save_to_dir='C:/Project/augmentation',
#                                                  save_prefix='hi',
#                                                  save_format='png')
# i = 0
# for batch in train_datagen.flow_from_directory('C:/Project/deneme',
#                                                  target_size = (244, 244),
#                                                  batch_size = 32,
#                                                  class_mode=None,
#                                                  shuffle=True,seed=1,
#                                                  save_to_dir='C:/Project/aug',
#                                                  save_prefix='hi',
#                                                  save_format='png'):

#     i += 1
#     if i > 70: 
#         break 

train_data = tf.keras.utils.image_dataset_from_directory(
    'C:/Project/data33/train',
    labels="inferred",
    label_mode="int",
    class_names= ['benign','malignant'],
    validation_split=0.2,
    subset="training",
    batch_size=32,
    image_size=(50, 50),
    shuffle=True,
    seed=1
)

test_data = tf.keras.utils.image_dataset_from_directory(
'C:/Project/data33/train',
labels="inferred",
label_mode="int",
class_names= ['benign','malignant'],
validation_split=0.2,
subset="validation",
seed=1,
image_size=(50, 50),
batch_size=32,
shuffle=True)

#import test data
# test_datagen = ImageDataGenerator(rescale = 1/255)
# test_data = test_datagen.flow_from_directory("C:/Project/data2/test",
#                                                            batch_size=32,
#                                                            target_size=(150,150),
#                                                            class_mode='binary',
#                                                            shuffle=True,seed=1)


label =  {0:"benign",1:"malignant"}
for i in label.keys() :
    print(i,label[i])
    
    
    model = Sequential([
Conv2D(32,kernel_size= 3,padding='valid',activation='relu',input_shape=(50,50,3)),
MaxPooling2D(pool_size=(2,2)),
Conv2D(64,kernel_size= 3,padding='valid',activation='relu'),
MaxPooling2D(pool_size=(2,2)),
Dropout(0.3),
Conv2D(128,kernel_size= 3,padding='valid',activation='relu'),
MaxPooling2D(pool_size=(2,2)),
Dropout(0.2),
Flatten(),
Dense(256,activation='relu'),
Dropout(0.15),
Dense(128,activation='relu'),
Dense(2,activation='sigmoid')])

model.compile(optimizer="adam", loss=keras.losses.SparseCategoricalCrossentropy(), metrics=['accuracy'])


model = Sequential([
Conv2D(32,kernel_size= 3,padding='valid',activation='relu',input_shape=(50,50,3)),
MaxPooling2D(pool_size=(2,2)),
Conv2D(64,kernel_size= 3,padding='valid',activation='relu'),
MaxPooling2D(pool_size=(2,2)),
Dropout(0.3),
Conv2D(128,kernel_size= 3,padding='valid',activation='relu'),
MaxPooling2D(pool_size=(2,2)),
Dropout(0.2),
Flatten(),
Dense(256,activation='relu'),
Dropout(0.15),
Dense(128,activation='relu'),
Dense(2,activation='sigmoid')])

model.compile(optimizer="adam", loss=keras.losses.SparseCategoricalCrossentropy(), metrics=['accuracy'])


history=model.fit(train_data,
    validation_data = test_data , 
    callbacks=[early_stop],
    epochs = 30)
    
    model.evaluate(test_data)
    
    import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

accuracy = history.history['accuracy']
val_accuracy = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)

#accuracy plot
plt.plot(epochs, accuracy, color='b', label='Training Accuracy')
plt.plot(epochs, val_accuracy, color='r', label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend()

plt.figure()
#loss plot
plt.plot(epochs, loss, color='g', label='Training Loss')
plt.plot(epochs, val_loss, color='y', label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.show()


y_predict = model.predict(test_data)
y_predict = np.argmax(y_predict,axis=1)
y_predict

labels = []
for _,y in test_data:
    labels.extend(list(y))
np.array(labels)
labels
fpr, tpr, _ = roc_curve(labels, y_predict)
roc_auc = auc(fpr, tpr)
plt.figure()
lw = 2
plt.plot(fpr, tpr, color='darkorange',
lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc="lower right")
plt.show()

img_ = tf.keras.utils.load_img("C:/Project/data3/16896/1/16896_idx5_x301_y1051_class1.png", target_size=(50, 50))
imag = tf.keras.utils.img_to_array(img_)
imag = np.expand_dims(imag, axis=0)
pred = model.predict(imag)
pred = np.argmax(pred,axis=1)
print(pred)
print(label[pred[0]])
plt.imshow(img_)
